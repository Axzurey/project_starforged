use std::time::Duration;

use gamedisplay::GameDisplay;
use message_io::{network::{NetEvent, Transport}, node::{self, NodeEvent}};
use winit::event_loop::EventLoop;
use shared::world as shared_world;

mod renderer;
mod gamedisplay;
mod view;
mod loaders;
mod network;
mod world;

pub fn main() {

    let (handler, listener) = node::split::<()>();

    // You can change the transport to Udp or Ws (WebSocket).
    let (server, _) = handler.network().connect(Transport::Udp, "127.0.0.1:3043").unwrap();

    //this blocks!
    // listener.for_each(move |event| match event.network() {
    //     NetEvent::Connected(_endpoint, _ok) => {},
    //     NetEvent::Accepted(_, _) => unreachable!(), // Only generated by listening
    //     NetEvent::Message(_endpoint, data) => {
    //         println!("Received: {}", String::from_utf8_lossy(data));
    //     },
    //     NetEvent::Disconnected(_endpoint) => (),
    // });

    let event_loop = EventLoop::new().unwrap();
    event_loop.set_control_flow(winit::event_loop::ControlFlow::Poll);

    let mut display = GameDisplay::default();
    event_loop.run_app(&mut display);


}